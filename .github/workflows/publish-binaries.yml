name: CLI - Build and Publish Binaries

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PACKAGE_NAME: phonetic
jobs:
  build-binaries:
    strategy:
      matrix:
        os: ["macos", "ubuntu", "windows"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install project
        run: poetry install --no-interaction

      - name: Package binary
        run: poetry run python package.py

      - uses: actions/upload-artifact@v3
        if: ${{ github.ref == 'refs/heads/main'}}
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.os }}
          path: ${{ github.workspace }}/dist/
          retention-days: 1
          if-no-files-found: error

  # Only release binaries if the workflow is running on main
  release-binaries:
    if: ${{ github.ref == 'refs/heads/main'}}
    needs: build-binaries
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - run: brew install dasel

      - name: Extract package version
        run: |
          version=$(dasel select --plain -p toml -f pyproject.toml -s '.tool.poetry.version')
          echo "cli_version=$version" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@d745f2e74aaf1ee82e747b181f7a0967978abee0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.cli_version }}
          tag_prefix: ""

      - uses: ncipollo/release-action@4c75f0f2e4ae5f3c807cf0904605408e319dcaac
        with:
          artifacts: "artifacts/*/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifactErrorsFailBuild: true
          commit: ${{ github.sha }}
          omitBody: true
          name: ${{ env.PACKAGE_NAME }}
          removeArtifacts: true
          tag: ${{ steps.tag_version.outputs.new_tag }}
